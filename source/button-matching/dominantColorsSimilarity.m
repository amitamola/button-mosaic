% Dominant colors similarity measure based on the OCCD measure presented in the paper:
%
% Extraction of Perceptually Important Colors and Similarity Measurement 
% for Image Matching, Retrieval, and Analysis, 2002
% Aleksandra Mojsilovic, Jianying Hu and Emina Soljanin
%
% DC1 & DC2 are the compared dominant colors (colors and dominance percentages) 
% generated by kDominantColors.m, while num_nodes determines the number of nodes 
% that the dominant colors should be quantized to. Larger num_nodes increases the 
% accuracy, but the time complexity is something like O(num_nodes^3).

function similarity = dominantColorsSimilarity(DC1, DC2, num_nodes)

    % Quantize dominance distribution into discrete nodes with indexes to 
    % the corresponding dominant color
    nodes1 = quantizeDistribution(DC1.dominance, num_nodes);
    nodes2 = quantizeDistribution(DC2.dominance, num_nodes);
    
    % Calculate pair-wise color distances. dists(i,j) is the distance between
    % dominant color i in DC1 and dominant color j in DC2.
    dists = pdist2(DC1.colors_lab, DC2.colors_lab);
    
    % Create cost table / bipartite graph edge weights.
    costs = dists(nodes1, nodes2);
    
    % Find the pairings that minimizes the total cost
    matched = matchpairs(costs, 1e6);
    
    % Find the total cost by summing the cost of each pairing.
    % Use (col-1)*row_width+row to vectorize lookup
    unsimilarity = sum(costs((matched(:,2) - 1) * num_nodes +  matched(:,1)));
    
    % Normalize by dividing by the number of nodes used to quantize the
    % dominant colors so that the result is similar regardless of nodes.
    similarity = -unsimilarity / num_nodes;
end

function result = quantizeDistribution(distribution, num_elements)
    counts = sumPreservingRound(distribution * num_elements);
    ranges = cumsum(counts);
    result = ones(1, num_elements, 'uint32');
    for i = 2:length(ranges)
        result(ranges(i - 1) + 1:ranges(i)) = i;
    end
end
